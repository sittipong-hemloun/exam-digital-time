<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <system.webServer>
    <!-- IIS Reverse Proxy to Node.js Server -->
    <rewrite>
      <rules>
        <!-- Forward all requests to Node.js server running on localhost:3000 -->
        <rule name="ReverseProxyToNode" stopProcessing="true">
          <match url="^(.*)$" />
          <conditions logicalGrouping="MatchAll" trackAllCaptures="false">
            <add input="{HTTPS}" pattern="on" />
          </conditions>
          <action type="Rewrite" url="http://localhost:3000/{R:1}" />
          <serverVariables>
            <set name="HTTP_X_FORWARDED_PROTO" value="https" />
            <set name="HTTP_X_FORWARDED_HOST" value="{HTTP_HOST}" />
            <set name="HTTP_X_FORWARDED_FOR" value="{REMOTE_ADDR}" />
            <set name="HTTP_X_ORIGINAL_URL" value="{UNENCODED_URL}" />
          </serverVariables>
        </rule>
        <!-- Forward HTTP requests -->
        <rule name="ReverseProxyToNodeHTTP" stopProcessing="true">
          <match url="^(.*)$" />
          <conditions logicalGrouping="MatchAll" trackAllCaptures="false">
            <add input="{HTTPS}" pattern="off" />
          </conditions>
          <action type="Rewrite" url="http://localhost:3000/{R:1}" />
          <serverVariables>
            <set name="HTTP_X_FORWARDED_PROTO" value="http" />
            <set name="HTTP_X_FORWARDED_HOST" value="{HTTP_HOST}" />
            <set name="HTTP_X_FORWARDED_FOR" value="{REMOTE_ADDR}" />
            <set name="HTTP_X_ORIGINAL_URL" value="{UNENCODED_URL}" />
          </serverVariables>
        </rule>
      </rules>

      <!-- Fix outbound URLs from proxied requests -->
      <outboundRules>
        <rule name="FixProxyRedirect" preCondition="ResponseIsHtml" stopProcessing="false">
          <match pattern="^http://localhost:3000(.*)" />
          <action type="Rewrite" value="http://{HTTP_HOST}{R:1}" />
        </rule>
        <preConditions>
          <preCondition name="ResponseIsHtml">
            <add input="{RESPONSE_CONTENT_TYPE}" pattern="^text/html" />
            <add input="{RESPONSE_CONTENT_ENCODING}" pattern="^$" />
          </preCondition>
        </preConditions>
      </outboundRules>
    </rewrite>

    <!-- Enable WebSocket support for real-time features -->
    <webSocket enabled="true" />

    <!-- Set proper MIME types -->
    <staticContent>
      <remove fileExtension=".json" />
      <mimeMap fileExtension=".json" mimeType="application/json" />
      <remove fileExtension=".woff" />
      <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
      <remove fileExtension=".woff2" />
      <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
      <remove fileExtension=".svg" />
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
    </staticContent>

    <!-- Security headers -->
    <httpProtocol>
      <customHeaders>
        <add name="X-Content-Type-Options" value="nosniff" />
        <add name="X-Frame-Options" value="SAMEORIGIN" />
        <add name="X-XSS-Protection" value="1; mode=block" />
      </customHeaders>
    </httpProtocol>

    <!-- Error pages - handled by Node.js -->
    <!-- Remove this section to let Node.js handle error pages -->
    <!-- <httpErrors errorMode="Custom" existingResponse="Replace">
      <remove statusCode="404" />
      <remove statusCode="502" />
      <remove statusCode="503" />
    </httpErrors> -->
  </system.webServer>
</configuration>
